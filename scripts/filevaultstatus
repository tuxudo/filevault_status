#!/usr/bin/python

import os
import subprocess
import sys
import plistlib
import platform
import re
sys.path.insert(0, '/usr/local/munki')
sys.path.insert(0, '/usr/local/munkireport')

from munkilib import FoundationPlist


def get_crypto_users():
    
    command = ['/usr/sbin/diskutil', 'apfs', 'listcryptousers', '/', '-plist']
    pl = _DictFromSubprocess(command)

    out = []

    for user in pl["Users"]:
        single_user = {'user_guid':user['APFSCryptoUserUUID']}
        for item in user:
            if item == 'APFSCryptoUserType':
                single_user['user_type'] = user[item]
            elif item == 'APFSCryptoUserUUID':

                try:
                    cmd = ['/usr/bin/dscl', '.', 'search', '/Users', 'GeneratedUID', user[item]]
                    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                                            stdin=subprocess.PIPE,
                                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                    (output, unused_error) = proc.communicate()
                    
                    single_user['user_name'] = output.split('\n')[0].split('		GeneratedUID = (')[0]
                  
                except Exception:
                    single_user['user_name'] = ""
                    
        out.append(single_user)
        
    return {"crypto_users":out}
    
def get_filevault_users():
    
    cmd = ['/usr/bin/fdesetup', 'list']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    out = []
    
    for fv_user in output.split('\n'):
        out.append(fv_user.split(',')[0])
    
    del out[-1]
    
    return ', '.join(out)

def get_filevault_status():
    
    cmd = ['/usr/bin/fdesetup', 'status', '-extended']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    out = {'filevault_status':0,'fv_master_keychain':0,'drive_type':"HFS"}
    
    for fv_line in output.split('\n'):
        if 'FileVault is On.' in fv_line:
            out['filevault_status'] = 1
        elif 'FileVault master keychain appears to be installed.' in fv_line:
            out['fv_master_keychain'] = 1
        elif 'Encryption in progress: ' in fv_line:
            out['fv_progress_status'] = fv_line
        elif 'Decryption in progress: ' in fv_line:
            out['fv_progress_status'] = fv_line
        elif 'but needs to be restarted to finish' in fv_line:
            out['fv_progress_status'] = fv_line
#        elif 'Deferred enablement appears to be active for user' in fv_line:
#            out['fv_progress_status'] = fv_line

        elif 'Volume is APFS' in fv_line:
            out['drive_type'] = "APFS"
    
    return out

def get_filevault_status_legacy():
    
    cmd = ['/usr/bin/fdesetup', 'status']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    out = {'filevault_status':0,'fv_master_keychain':0}
    
    for fv_line in output.split('\n'):
        if 'FileVault is On.' in fv_line:
            out['filevault_status'] = 1
        elif 'FileVault master keychain appears to be installed.' in fv_line:
            out['fv_master_keychain'] = 1
        elif 'Encryption in progress: ' in fv_line:
            out['fv_progress_status'] = fv_line
        elif 'Decryption in progress: ' in fv_line:
            out['fv_progress_status'] = fv_line
#        elif 'Deferred enablement appears to be active for user' in fv_line:
#            out['fv_progress_status'] = fv_line
    
    return out

def get_cs_info():

    try:
        command = ['/usr/sbin/diskutil', 'cs', 'info', '-plist', '/']
        pl = _DictFromSubprocess(command)

        out = {}

        for item in pl:
            if item == 'CoreStorageLogicalVolumeBytesConverted':
                out['bytes_converted'] = pl[item]
            elif item == 'CoreStorageLogicalVolumeConversionProgressPercent':
                out['conversion_percent'] = pl[item]
            elif item == 'CoreStorageLogicalVolumeConversionState':
                out['conversion_state'] = pl[item]
            elif item == 'CoreStorageLogicalVolumeConversionStateDetail':
                out['conversion_state_detail'] = pl[item]
            elif item == 'CoreStorageLogicalVolumeName':
                out['volume_name'] = pl[item]
            elif item == 'CoreStorageLogicalVolumeSize':
                out['volume_size'] = str(pl[item])
            elif item == 'CoreStorageLogicalVolumeStatus':
                out['volume_status'] = pl[item]
            elif item == 'CoreStorageUUID':
                out['uuid'] = pl[item]
            elif item == 'DesignatedCoreStoragePhysicalVolume':
                out['pv_uuid'] = pl[item]
            elif item == 'DesignatedCoreStoragePhysicalVolumeDeviceIdentifier':
                out['pvdeviceid'] = pl[item]
            elif item == 'DeviceIdentifier':
                out['device_identifier'] = pl[item]
            elif item == 'MemberOfCoreStorageLogicalVolumeFamily':
                out['lvf_uuid'] = pl[item]
            elif item == 'MemberOfCoreStorageLogicalVolumeGroup':
                out['lvg_uuid'] = pl[item]

        return out
    
    except Exception:
        return {}
    
def get_deferral_info():
    
    cmd = ['/usr/bin/fdesetup', 'showdeferralinfo']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    return output.replace("{", "").replace("}", "").strip()

def get_has_institutional_recovery_key():
    
    cmd = ['/usr/bin/fdesetup', 'hasinstitutionalrecoverykey']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    return {'has_institutional_recovery_key':to_bool(output)}

def get_has_personal_recovery_key():
    
    cmd = ['/usr/bin/fdesetup', 'haspersonalrecoverykey']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    return {'has_personal_recovery_key':to_bool(output)}

def get_using_recovery_key():
    
    cmd = ['/usr/bin/fdesetup', 'usingrecoverykey']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    return {'using_recovery_key':to_bool(output)}

def get_auth_restart_support():
    
    cmd = ['/usr/bin/fdesetup', 'supportsauthrestart']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    return {'auth_restart_support':to_bool(output)}

def get_filevault_active():
    
    cmd = ['/usr/bin/fdesetup', 'isactive']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()
    
    if "true" in output:
        return True
    else:
        return False
    
def to_bool(s):
    if s == True or "true" in s:
        return 1
    else:
        return 0

def merge_two_dicts(x, y):
    z = x.copy()
    z.update(y)
    return z
def getOsVersion():
    """Returns the minor OS version."""
    os_version_tuple = platform.mac_ver()[0].split('.')
    return int(os_version_tuple[1])

def _DictFromSubprocess(command, stdin=None):
    """returns a dict based upon a subprocess call with a -plist argument.
    Args:
        command: the command to be executed as a list
        stdin: any standard input required.
    Returns:
        dict: dictionary from command output
    Raises:
        Exception: Error running command
        Exception: Error creating plist from standard output
        
    Copied from disk_report module's script
    """

    task = {}

    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (stdout, stderr) = p.communicate()

    if p.returncode is not 0:
        raise Exception("Error running command: %s, stderr: %s" %
                                             (command, stderr))
    else:
        try:
            return plistlib.readPlistFromString(stdout)
        except xml.parsers.expat.ExpatError:
            raise Exception("Error creating plist from output: %s" % stdout)

def main():
    """Main"""
    # Create cache dir if it does not exist
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # Skip manual check
    if len(sys.argv) > 1:
        if sys.argv[1] == 'manualcheck':
            print 'Manual check: skipping'
            exit(0)
            
    # Check if module is supported
    if  not os.path.isfile('/usr/bin/fdesetup'):
        print "filevaultstatus module not supported on this version of macOS"
        exit(0)

    # Get information about FileVault    
    result = dict()

    # Greater than 12
    if getOsVersion() > 12:

        result = merge_two_dicts(result, get_filevault_status())

        # Check if APFS or HFS
        if result['drive_type'] == "APFS":
            result = merge_two_dicts(result, get_crypto_users())
        else:
            result = merge_two_dicts(result, get_cs_info())
            result = merge_two_dicts(result, get_using_recovery_key())

        result = merge_two_dicts(result, get_has_institutional_recovery_key())    
        result = merge_two_dicts(result, get_has_personal_recovery_key())
        result = merge_two_dicts(result, get_auth_restart_support())
        result = merge_two_dicts(result, {'deferral_info':get_deferral_info()})
        if result['filevault_status'] == 1:
            result = merge_two_dicts(result, {'filevault_users':get_filevault_users()})
        else:
            {'filevault_users':""}
            
    else:

        result = merge_two_dicts(result, get_filevault_status_legacy())
        result = merge_two_dicts(result, get_cs_info())
        result = merge_two_dicts(result, get_using_recovery_key())
        result = merge_two_dicts(result, get_has_institutional_recovery_key())
        result = merge_two_dicts(result, get_has_personal_recovery_key())
        result = merge_two_dicts(result, get_auth_restart_support())
        result = merge_two_dicts(result, {'deferral_info':get_deferral_info()})
        result = merge_two_dicts(result, {'filevault_users':get_filevault_users()})
    
    # Write FileVault results to cache
    output_plist = os.path.join(cachedir, 'filevault_status.plist')
    plistlib.writePlist(result, output_plist)
    #print plistlib.writePlistToString(result)

if __name__ == "__main__":
    main()
